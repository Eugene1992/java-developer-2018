package JDBC_pckg.dao_pckg;

import JDBC_pckg.ConnectionFactory;
import JDBC_pckg.Employee;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class EmployeeDaoImpl implements EmployeeDao {

    private Connection connection;

    public EmployeeDaoImpl() {
        this.connection = ConnectionFactory.getConnection();
    }

    // TODO: 7/29/2018  PSQLException: Returning autogenerated keys is only supported for 8.2 and later servers.
    @Override
    public Employee create(Employee employee) {

        PreparedStatement preparedStatement = null;
        ResultSet rs = null;

//        int id = 0;

        try {

            preparedStatement = connection.prepareStatement
                    ("INSERT INTO employee_filled(first_name, last_name, age, salary, is_married,/* birthdate,*/ position) " +
                            "VALUES(?, ?, ?, ?, ?,/* ?,*/ ?)"/*, Statement.RETURN_GENERATED_KEYS*/);

            preparedStatement.setString(1, employee.getFirst_name());
            preparedStatement.setString(2, employee.getLast_name());
            preparedStatement.setInt(3, employee.getAge());
            preparedStatement.setInt(4, employee.getSalary());
            preparedStatement.setBoolean(5, employee.is_married());
//            preparedStatement.setString(6, employee.getBirthdate());
            preparedStatement.setString(6, employee.getPosition());

            preparedStatement.execute();

            /*rs = preparedStatement.getGeneratedKeys();

            rs.next();
            id = rs.getInt("id");*/

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

//        return id == 0 ? null : get(id);

        return getAll().get(getAll().size() - 1);
    }

    @Override
    public Employee update(Employee employee) {

        PreparedStatement preparedStatement = null;

        try {

            preparedStatement = connection.prepareStatement
                    ("UPDATE employee_filled " +
                            "SET first_name = ?, last_name = ?, age = ?, salary = ?, is_married = ?,/* birthdate = ?,*/ position = ? " +
                            "WHERE id = ?");

            preparedStatement.setString(1, employee.getFirst_name());
            preparedStatement.setString(2, employee.getLast_name());
            preparedStatement.setInt(3, employee.getAge());
            preparedStatement.setInt(4, employee.getSalary());
            preparedStatement.setBoolean(5, employee.is_married());
//            preparedStatement.setString(6, employee.getBirthdate());
//            preparedStatement.setString(6, employee.getBirthdate());
            preparedStatement.setString(6, employee.getPosition());
            preparedStatement.setInt(7, employee.getId());

            preparedStatement.executeUpdate();


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return employee;
    }

    @Override
    public boolean delete(Integer id) {

        Statement statement = null;

        boolean result = false;

        try {

            statement = connection.createStatement();
            result = statement.executeUpdate("DELETE FROM employee_filled " +
                    "WHERE id = " + id) > 0;


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return result;
    }

    @Override
    public Employee get(Integer id) {

        Statement statement = null;
        ResultSet resultSet = null;

        Employee result = null;

        try {

            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM employee_filled " +
                    "WHERE id = " + id);

            resultSet.next();
            result = new Employee(
                    resultSet.getInt("id"),
                    resultSet.getString("first_name"),
                    resultSet.getString("last_name"),
                    resultSet.getInt("age"),
                    resultSet.getInt("salary"),
                    resultSet.getBoolean("is_married"),
                    resultSet.getString("position")
            );

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return result;
    }

    @Override
    public List<Employee> getAll() {

        Statement statement = null;
        ResultSet resultSet = null;

        List<Employee> result = new ArrayList<>();

        try {

            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM employee_filled");

            while (resultSet.next()) {
                result.add(new Employee(
                                resultSet.getInt("id"),
                                resultSet.getString("first_name"),
                                resultSet.getString("last_name"),
                                resultSet.getInt("age"),
                                resultSet.getInt("salary"),
                                resultSet.getBoolean("is_married"),
                                resultSet.getString("position")
                        )
                );
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return result;
    }

    @Override
    public List<Employee> getByName(String name) {

        Statement statement = null;
        ResultSet resultSet = null;

        List<Employee> result = new ArrayList<>();

        try {

            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM employee_filled " +
                    "WHERE first_name = \'" + name + "\'");

            while (resultSet.next()) {
                result.add(new Employee(
                                resultSet.getInt("id"),
                                resultSet.getString("first_name"),
                                resultSet.getString("last_name"),
                                resultSet.getInt("age"),
                                resultSet.getInt("salary"),
                                resultSet.getBoolean("is_married"),
                                resultSet.getString("position")
                        )
                );
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return result;
    }

    @Override
    public List<Employee> getByPosition(String position) {

        Statement statement = null;
        ResultSet resultSet = null;

        List<Employee> result = new ArrayList<>();

        try {

            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT * FROM employee_filled " +
                    "WHERE position = \'" + position + "\'");

            while (resultSet.next()) {
                result.add(new Employee(
                                resultSet.getInt("id"),
                                resultSet.getString("first_name"),
                                resultSet.getString("last_name"),
                                resultSet.getInt("age"),
                                resultSet.getInt("salary"),
                                resultSet.getBoolean("is_married"),
                                resultSet.getString("position")
                        )
                );
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return result;
    }

    public void close() {
        try {
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

